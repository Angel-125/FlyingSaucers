EXPERIMENT_DEFINITION
{
	id = GravioliumStudy
	title = Graviolium Preliminary Study
	baseValue = 25
	scienceCap = 100
	dataScale = 1
	biomeMask = 7
	situationMask = 63
	techRequired = spaceExploration

	//WBIModuleScienceExperiment specific fields

	//(Required) description of the experiment
	description = This rare substance defies normal chemical analysis. We practically have to invent new instruments to study it.

	//(Required) mass of the experiment in tonnes
	mass = 0.005

	//All of the following are optional

	//Tags are used to include or filter out certain experiments.
	//Some labs only allow certain types of experiments.
	//If a lab has tags, and an experiment doesn't or
	//it doesn't have a matching one then it won't be included in the list
	//of possible experiments.
	// Primarily this is used to determine what experiments a lab can create.
	tags = basic

	//Some labs can create experiments in the field, saving you the trouble of transporting them.
	//List the resources required and the amount and separate resources by semicolon.
	//Example: ResearchKits,50;MaterialKits,50
	//If you leave this out you'll use the default resource costs defined by the experiment lab.
	creationResources = ResearchKits,100;MaterialKits,50

	//Normally a lab will feed the experiment with required resources.
	//This switch lets the experiment check the whole vessel.
	//the default behavior is false.
	checkVesselResources = true

	//Minimum required asteroid mass in tonnes
//	minimumAsteroidMass = 1.0

	//Tech node that must be researched in order for the experiment to be available
	techRequired = spaceExploration

	//Percent chance that an experiment will be successful.
	//The dice are rolled after all other conditions are met.
//	chanceOfSuccess = 65

	//Cost of the experiment (does not include resource costs)
//	cost =

	//Parts required to run the experiment
	//You can have several requiredPart entries
	//and the experiment will need at least one of them on the craft.
//	requiredPart = <The title of some part>

	//Minimum crew in the vessel
	minCrew = 2

	//Minimum required altitude to run the experiment, in meters
//	minAltitude =

	//Maximum altitude required to run the experiment, in meters
//	maxAltitude =

	//Format: ResourceName,Amount;ResourceName,Amount,Transfer from vessel to lab/part (optional)
	requiredResources = LabTime,72;Graviolium,10,true

	//Separate these by semicolon.
	//Can include one or more of: DOCKED, ESCAPING, FLYING, LANDED, PRELAUNCH, ORBITING, SPLASHED, SUB_ORBITAL
//	situations = ORBITING

	//A custom part module that will be run upon successful completion of an experiment.
	//Set this up like you would with any other part module.
	//This gives you the ability to have custom benefits when an experiment completes.
	//Must implement IWBIExperimentResults
//	MODULE
//	{
//		name = MyCustomPartModule
//	}

	RESULTS
	{
		default = Graviolium is some strange stuff that seems to defy physics. The results are so confusing, we don't even know where to begin.
		KerbinSrfLanded = Legends speak of a conflict between the Ancients and the Kraken. When their blood was spilled, it fell to the ground like flecks of blue snowflakes. The graviolium sample reacts similarly when dropped.
		KerbinSrfLanded = When examining the sample under a microscope, its structure resembles platelets. The term "Kraken's Blood" immediately circulated through the research team. We better keep that term under wraps, don't want to start a panic.
		KerbinSrfLanded = Someone thought the sample looked a bit like blue-colored dried blood, and then did some research on the internet. The researcher discovered that the Ancients fought the Kraken for control over the universe, and marked important battlegrounds. After going off on such a long tangent, the team decided to restrict internet usage to vetted scientific sites.
		KerbinSrfLanded = We tried examining the graviolium sample with an electron mircroscope. We couldn't see anything. It's as if the sample absorbed the electric charge.
		KerbinInSpace = Normally, two objects given a positive electric charge will repel each other, but with sufficient electric charge, the graviolium sample is attracted to the other object.
		KerbinInSpace = Normally, if one object has a positive electric charge and another has a negative charge, they'll be attracted to each other. For instance, rub a balloon on your hair and it gains a negative charge. Stick that baloon near a wall, and it will stick to the positively charged particles in the wall. But with sufficient electric charge, the graviolium sample is repelled by the positively charged object.
		KerbinInSpace = We tried to observe the graviolium sample in space just like we did on the ground. At first we got the same results and couldn't see anything. Then somebody took a snack break while leaving the electron microscope on, and the sample exploded.
		KerbinInSpace = After giving the graviolium sample some electric charge, one of the researchers touched it by accident and received a shock. This stuff might be useful as a party gag; charge it up, leave it on the table, and watch what happens when somebody picks it up.
		MunSrfLanded = A classic physics experiment involves dropping a hammer and a feather in a vacuum. With no air to slow them, both will fall at the exact same rate. When we tried that experiment with a hammer and a sample of graviolium, the graviolium fell slower than the hammer. Sometimes, it fell faster.
		MinmusSrfLanded = We put several test objects into the experiment chamber, including somebody's snacks, along with the graviolium sample. No matter the test object, and no matter the test object's electrical charge (positive, negative, or neutral), giving the graviolium sample a positive charge attracted it to the test object, and giving it a negative charge repelled it away from the test object. No doubt about it, graviolium is some form of exotic matter.
	}
}

EXPERIMENT_DEFINITION
{
	id = wbiSaucerResearchExperiment
	title = Saucer Reverse-Engineering
	baseValue = 25
	scienceCap = 100
	dataScale = 1
	biomeMask = 7
	situationMask = 63

	//WBIModuleScienceExperiment specific fields

	//(Required) description of the experiment
	description = Crashed flying saucers can yield valuable scientific data that may lead to new technologies. Even when the obvious science has been gained, there's still a chance of achieving a breakthrough and gaining some new technology. Of course, we'd have to find a crashed flying saucer first...

	//(Required) mass of the experiment in tonnes
	mass = 0.005

	//All of the following are optional

	//Tags are used to include or filter out certain experiments.
	//Some labs only allow certain types of experiments.
	//If a lab has tags, and an experiment doesn't or
	//it doesn't have a matching one then it won't be included in the list
	//of possible experiments.
	// Primarily this is used to determine what experiments a lab can create.
	tags = basic

	//Some labs can create experiments in the field, saving you the trouble of transporting them.
	//List the resources required and the amount and separate resources by semicolon.
	//Example: ResearchKits,50;MaterialKits,50
	//If you leave this out you'll use the default resource costs defined by the experiment lab.
	creationResources = ResearchKits,100;MaterialKits,50

	//Normally a lab will feed the experiment with required resources.
	//This switch lets the experiment check the whole vessel.
	//the default behavior is false.
	checkVesselResources = true

	//Minimum required asteroid mass in tonnes
//	minimumAsteroidMass = 1.0

	//Tech node that must be researched in order for the experiment to be available
	techRequired = advExploration

	//Percent chance that an experiment will be successful.
	//The dice are rolled after all other conditions are met.
//	chanceOfSuccess = 65

	//Cost of the experiment (does not include resource costs)
//	cost =

	//Parts required to run the experiment
	//You can have several requiredPart entries
	//and the experiment will need at least one of them on the craft.
//	requiredPart = <The title of some part>

	//Minimum crew in the vessel
//	minCrew = 2

	//Minimum required altitude to run the experiment, in meters
//	minAltitude =

	//Maximum altitude required to run the experiment, in meters
//	maxAltitude =

	//Format: ResourceName,Amount;ResourceName,Amount,Transfer from vessel to lab/part (optional)
	requiredResources = LabTime,45,true

	//Separate these by semicolon.
	//Can include one or more of: DOCKED, ESCAPING, FLYING, LANDED, PRELAUNCH, ORBITING, SPLASHED, SUB_ORBITAL
	situations = LANDED;SPLASHED;PRELAUNCH

	//List of anomalies where the experiment must be run. You only need to be near one of these anomalies.
	//Seprate the anomaly names by a semicolon.
//	requiredAnomalies = UFO

	//How close, in meters, do you need to be for the experiment to run?
//	minAnomalyRange = 50

	//A custom part module that will be run upon successful completion of an experiment.
	//Set this up like you would with any other part module.
	//This gives you the ability to have custom benefits when an experiment completes.
	//Must implement IWBIExperimentResults
	MODULE
	{
		//This module will flag parts as experimental, allowing you to use them even when their tech tree node remains unresearched.
		//This is similar to how research contracts can give you a part to use for the contract before the node it resides in is unlocked.
		name = WBIUnlockTechResult

		//Roll a number between 1 and the number below.
		dieRoll = 100

		//If the die roll meets or exceeeds the target number then one or more parts will be flagged experimental.
		targetNumber = 96

		//Parts in these nodes will be flagged as experimental before randomly selecting a part to become experimental.
		//If blank, then a random part will be flagged as experimental.
		//Parts will be flagged in the order in which the nodes below appear.
		priorityNodes = advAerodynamics;highAltitudeFlight;wbiSaucerTechnologies;wbiGravityWaveApplications;wbiMothershipTech;wbiAdvAlienEngineering
	
		//Indicates whether or not to flag all parts in all the priority nodes upon completion of the experiment.
		unlockAll = false

		//Parts will never be flagged experimental if their tech tree node is on the blacklist.
//		blacklistNodes =

		//If you specify a mod folder, then only parts that are in the mod will be allowed to be flagged experimental
		modFolders = FlyingSaucers

		//You can blacklist some mod folders to exclude their parts from being flagged experimental.
		//Separate folders by a semicolon
//		excludeFolders =
	}

	RESULTS
	{
		default = TBD
	}
}