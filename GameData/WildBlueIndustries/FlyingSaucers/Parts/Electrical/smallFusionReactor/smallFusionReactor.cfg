PART
{
	// this is a sample config file, for determining a good file format for defining part parameters
	// comment line - ignored by cfg parser
	// empty lines, or lines without a '=' sign are also ignored
	// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
	// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
	// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
	// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
	// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
	// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)

	// --- general parameters ---
	name = wbiSmallFusionReactor
	module = Part
	author = Michael Billard (Angel-125)

	// --- asset parameters ---
	rescaleFactor = 1

	MODEL
	{
		model = WildBlueIndustries/FlyingSaucers/Parts/Electrical/smallFusionReactor/fusionReactor
	}

	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_stack_top = 0.0, 0.805, 0.0, 0.0, 1.0, 0.0, 0
	node_stack_bottom = 0.0, 0, 0.0, 0.0, -1.0, 0.0, 0
	node_attach = 0.0, 0, 0.0, 0.0, -1.0, 0.0

	// --- editor parameters ---
	TechRequired = wbiGravityWaveApplications
	entryCost = 30000
	cost = 25000
	category = Electrical
	subcategory = 0
	title = Gravitic Fusion Reactor
	manufacturer = <CLASSIFIED>
	description = This fusion reactor uses gravitic displacement fields (a.k.a. GravityWaves) to crush Propellium until it fuses. The resulting ElectroPlasma is then tapped to produce ElectricCharge. The plasma has other uses such as supplying propellant for electro-plasma RCS thrusters.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,1,1,1,1

	// --- standard part parameters ---
	mass = 0.25
	dragModelType = default
	maximum_drag = 0.25
	minimum_drag = 0.25
	angularDrag = .5
	crashTolerance = 45
	breakingForce = 280
	breakingTorque = 280
	maxTemp = 2000
	stagingIcon = FUEL_TANK

	MODULE
	{
		name = WBIModuleResourceConverterFX
		ConverterName = Fusion Reactor
		StartActionName = Start Fusion Reactor
		StopActionName = Stop Fusion Reactor
		ToggleActionName = Toggle Fusion Reactor
		FillAmount = 1.0
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		startEffect = effectStart
		stopEffect = effectStop
		runningEffect = effectRunning
		 
		INPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 2
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = Propellium
			Ratio = 0.0016875
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 300
			DumpExcess = true
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectroPlasma
			Ratio = 300
			DumpExcess = true
		}
	}

	MODULE:NEEDS[KIS]
	{
		name = ModuleKISItem
		stackable = true
		allowPartAttach = 1
		staticAttachBreakForce = 10
	}

	RESOURCE
	{
		name = ElectroPlasma
		amount = 0
		maxAmount = 300
	}

	EFFECTS
	{
		effectStart
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/FlyingSaucers/FX/GeneratorStart
				volume = 0.5
				pitch = 1.0
				loop = false
			}
		}

		effectStop
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/FlyingSaucers/FX/GeneratorStop
				volume = 0.5
				pitch = 1.0
				loop = false
			}
		}
		effectRunning
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/FlyingSaucers/FX/UFOGenerator3
				volume = 0.0 0.0
				volume = 0.05 0.7
				volume = 1.0 2.0
				pitch = 0.0 0.0
				pitch = 0.05 0.5
				pitch = 1.0 1.5
				loop = true
			}
		}
	}

	MODULE
	{
		name = ModuleTestSubject
		useStaging = True
		useEvent = True
		situationMask = 15
		CONSTRAINT
		{
			type = OXYGEN
			value = True
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 200
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 100
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 100
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 50
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 50
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 20
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 300
			situationMask = 8
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 50
			situationMask = 8
		}
		CONSTRAINT
		{
			type = DENSITY
			test = GT
			value = 0.3
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = DENSITY
			test = GT
			value = 0.1
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = DENSITY
			test = GT
			value = 0.05
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 8000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 500
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ALWAYS
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = BODYANDSITUATION
			prestige = Significant
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ONCEPERPART
			prestige = Exceptional
		}
	}
}
